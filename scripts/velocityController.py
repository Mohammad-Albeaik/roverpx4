#!/usr/bin/env python

# ROS python API
import rospy
# Joy message structure
# 3D point & Stamped Pose msgs & Orientation as quaternion
from geometry_msgs.msg import Point, PoseStamped, Quaternion, Twist
#import math for arctan and sqrt function
from math import atan2, sqrt, pi, cos, sin
#import quaternion transformation
from tf.transformations import euler_from_quaternion
from numpy import array
from std_msgs.msg import String
from mavros_msgs.msg import OverrideRCIn
import time

RcOver 					= OverrideRCIn()
RcOver.channels = [1500,1500,1500,1500,0,0,0,0]
sum_error_v 		= 0
sum_error_w 		= 0

#vg          = 2
wg          = 0
v           = 0
w           = 0

kvp         = 0.35	#P for linear
kvd         = 0.0     #D for linear
kvi         = 0.0  #I for linear
kwp         = 0.4	#P for angular
kwd         = 0.0		#D for angular
kwi         = 0.00 	#I for angular

old_v       = 0
old_w       = 0
vi = 2.1
wi = 0

xdot                   = 0.0
ydot                   = 0.0
yawdot                 = 0.0

vg = [0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0.0052,
    0.0190,
    0.0390,
    0.0633,
    0.0905,
    0.1195,
    0.1498,
    0.1806,
    0.2117,
    0.2427,
    0.2736,
    0.3040,
    0.3340,
    0.3635,
    0.3924,
    0.4207,
    0.4484,
    0.4754,
    0.5018,
    0.5276,
    0.5528,
    0.5773,
    0.6012,
    0.6246,
    0.6473,
    0.6695,
    0.6911,
    0.7122,
    0.7327,
    0.7527,
    0.7722,
    0.7912,
    0.8096,
    0.8276,
    0.8451,
    0.8621,
    0.8787,
    0.8948,
    0.9105,
    0.9257,
    0.9405,
    0.9549,
    0.9689,
    0.9825,
    0.9957,
    1.0085,
    1.0209,
    1.0330,
    1.0447,
    1.0560,
    1.0670,
    1.0777,
    1.0880,
    1.0981,
    1.1078,
    1.1172,
    1.1263,
    1.1351,
    1.1437,
    1.1520,
    1.1600,
    1.1678,
    1.1754,
    1.1828,
    1.1899,
    1.1969,
    1.2037,
    1.2103,
    1.2167,
    1.2046,
    1.1749,
    1.1431,
    1.1003,
    1.0461,
    0.9887,
    0.9310,
    0.8735,
    0.8164,
    0.7601,
    0.7046,
    0.6501,
    0.5966,
    0.5443,
    0.4931,
    0.4430,
    0.3941,
    0.3463,
    0.2996,
    0.2541,
    0.2097,
    0.1663,
    0.1240,
    0.0828,
    0.0425,
    0.0033,
   -0.0350,
   -0.0723,
   -0.1088,
   -0.1443,
   -0.1789,
   -0.2127,
   -0.2456,
   -0.2777,
   -0.3090,
   -0.3395,
   -0.3692,
   -0.3982,
   -0.4264,
   -0.4540,
   -0.4808,
   -0.5069,
   -0.5324,
   -0.5572,
   -0.5814,
   -0.6049,
   -0.6279,
   -0.6502,
   -0.6719,
   -0.6931,
   -0.7137,
   -0.7337,
   -0.7532,
   -0.7722,
   -0.7907,
   -0.8086,
   -0.8260,
   -0.8430,
   -0.8595,
   -0.8755,
   -0.8910,
   -0.9061,
   -0.9208,
   -0.9350,
   -0.9489,
   -0.9623,
   -0.9753,
   -0.9880,
   -1.0002,
   -1.0122,
   -1.0120,
   -0.9964,
   -0.9745,
   -0.9504,
   -0.9270,
   -0.9041,
   -0.8818,
   -0.8600,
   -0.8388,
   -0.8181,
   -0.7979,
   -0.7780,
   -0.7566,
   -0.7328,
   -0.7081,
   -0.6834,
   -0.6590,
   -0.6351,
   -0.6119,
   -0.5894,
   -0.5676,
   -0.5465,
   -0.5261,
   -0.5063,
   -0.4871,
   -0.4685,
   -0.4505,
   -0.4330,
   -0.4163,
   -0.4002,
   -0.3847,
   -0.3697,
   -0.3552,
   -0.3411,
   -0.3275,
   -0.3142,
   -0.3013,
   -0.2887,
   -0.2765,
   -0.2646,
   -0.2530,
   -0.2416,
   -0.2306,
   -0.2199,
   -0.2094,
   -0.1992,
   -0.1892,
   -0.1795,
   -0.1700,
   -0.1607,
   -0.1517,
   -0.1429,
   -0.1343,
   -0.1260,
   -0.1178,
   -0.1099,
   -0.1021,
   -0.0945,
   -0.0871,
   -0.0799,
   -0.0729]
a = [   0,
      0,
    0.2061,
    0.5548,
    0.8006,
    0.9712,
    1.0867,
    1.1622,
    1.2086,
    1.2337,
    1.2434,
    1.2423,
    1.2333,
    1.2185,
    1.2000,
    1.1788,
    1.1559,
    1.1317,
    1.1068,
    1.0817,
    1.0565,
    1.0314,
    1.0064,
    0.9818,
    0.9576,
    0.9337,
    0.9102,
    0.8872,
    0.8647,
    0.8426,
    0.8209,
    0.7997,
    0.7789,
    0.7585,
    0.7385,
    0.7190,
    0.6998,
    0.6811,
    0.6626,
    0.6446,
    0.6269,
    0.6095,
    0.5925,
    0.5759,
    0.5595,
    0.5435,
    0.5278,
    0.5123,
    0.4973,
    0.4825,
    0.4680,
    0.4538,
    0.4401,
    0.4266,
    0.4134,
    0.4006,
    0.3882,
    0.3762,
    0.3646,
    0.3533,
    0.3425,
    0.3321,
    0.3220,
    0.3125,
    0.3033,
    0.2945,
    0.2862,
    0.2783,
    0.2707,
    0.2635,
    0.2568,
   -0.4816,
   -1.1896,
   -1.2716,
   -1.7107,
   -2.1682,
   -2.2962,
   -2.3073,
   -2.3013,
   -2.2825,
   -2.2544,
   -2.2197,
   -2.1805,
   -2.1382,
   -2.0940,
   -2.0487,
   -2.0028,
   -1.9569,
   -1.9111,
   -1.8658,
   -1.8211,
   -1.7772,
   -1.7340,
   -1.6918,
   -1.6504,
   -1.6099,
   -1.5702,
   -1.5314,
   -1.4935,
   -1.4565,
   -1.4204,
   -1.3850,
   -1.3504,
   -1.3167,
   -1.2838,
   -1.2516,
   -1.2201,
   -1.1893,
   -1.1593,
   -1.1300,
   -1.1012,
   -1.0731,
   -1.0457,
   -1.0188,
   -0.9926,
   -0.9669,
   -0.9417,
   -0.9171,
   -0.8931,
   -0.8695,
   -0.8465,
   -0.8238,
   -0.8017,
   -0.7800,
   -0.7588,
   -0.7380,
   -0.7177,
   -0.6977,
   -0.6782,
   -0.6590,
   -0.6404,
   -0.6221,
   -0.6042,
   -0.5868,
   -0.5698,
   -0.5531,
   -0.5369,
   -0.5211,
   -0.5059,
   -0.4911,
   -0.4768,
    0.0066,
    0.6255,
    0.8748,
    0.9624,
    0.9386,
    0.9154,
    0.8928,
    0.8708,
    0.8493,
    0.8283,
    0.8079,
    0.7924,
    0.8563,
    0.9527,
    0.9874,
    0.9901,
    0.9761,
    0.9538,
    0.9277,
    0.9001,
    0.8723,
    0.8448,
    0.8181,
    0.7923,
    0.7673,
    0.7433,
    0.7202,
    0.6980,
    0.6693,
    0.6437,
    0.6204,
    0.5988,
    0.5807,
    0.5626,
    0.5467,
    0.5309,
    0.5167,
    0.5026,
    0.4895,
    0.4766,
    0.4645,
    0.4526,
    0.4411,
    0.4300,
    0.4193,
    0.4089,
    0.3987,
    0.3889,
    0.3793,
    0.3699,
    0.3608,
    0.3519,
    0.3432,
    0.3348,
    0.3265,
    0.3185]
def spCb(msg):
    global v,w
    xdot    = msg.linear.x
    ydot    = msg.linear.y
    forward = msg.linear.z
    yawdot  = msg.angular.z

    w = yawdot
    v =forward*sqrt(xdot*xdot+ydot*ydot)


g = 0
def UpdateSpeed():
    global v, w , sum_error_v, sum_error_w, kvp, kwp, kvd, kwd, kvi, kwi, old_v, old_w, vg, wg,vi,wi,T0,a,g

#------------------------------------------------------------------------- PID Start ----------------------------------------------------------------------


    dv = vg[0] - v
    dw = wg - w
    if dv >=1 or dv<=-1:
       kvp = 0.7
    elif dv>= 0.75 or dv<=-0.75:
       kvp = 0.45
    elif dv>= 0.45 or dv<=-0.45:
       kvp = 0.35
    else:
       kvp = 0.25

    sum_error_v = sum_error_v + dv
    sum_error_w = sum_error_w + dw

    vi = vi + (kvp * dv + kvd * old_v + kvi * sum_error_v)
    wi = wi + (kwp * dw + kwd * old_w + kwi * sum_error_w)

    if sum_error_v > 10:
        sum_error_v = 10
    elif sum_error_v < -10:
        sum_error_v = -10
    if sum_error_w > 10:
        sum_error_w = 10
    elif sum_error_w < -10:
        sum_error_w = -10

    if vi > 30:
        vi = 30
    if vi < -30:
        vi = -30
    if wi > 90:
        wi = 90
    if wi < -90:
        wi = -90

    old_v       = dv
    old_w       = dw

#    vi = 13.4498* vg + 2.14981
#------------------------------------------------------------------------- PID end-------------------------------------------------------------------------
    r = 0.065 # radius 13 cm
    L = 0.33 # length between wheels 33 cm


    WR =   vi/r +L/r * wi
    WL =   2* vi/r - WR

    if WR > 0:
        WR = - WR + 1480
    elif WR <0:
        WR = - WR +1520
    else:
        WR = 1500
    if WL > 0:
        WL = - WL + 1480
    elif WL < 0:
        WL = - WL +1520
    else:
        WL = 1500


#    print(round(dv,3))
 #   print(vi)
    RcOver.channels = [1500,WR,1500,WL-20,0,0,0,0]   # 4th





# Main function
def main():
    global T0

    time.sleep(3.5)

    # Initiate node
    rospy.init_node('Roveer_sp', anonymous=True)

    # ROS loop rate, [Hz]
    rate = rospy.Rate(40.0)

    # Subscribe to Rover's local position
    rospy.Subscriber('velocity',Twist, spCb)


    # RCOveride publisher
    rc_pub = rospy.Publisher('mavros/rc/override',OverrideRCIn, queue_size=1)

    T0 = time.time()
    # ROS main loop
    while not rospy.is_shutdown():

            UpdateSpeed()
            rc_pub.publish(RcOver)
            rate.sleep()


if __name__ == '__main__':
    try:
            main()
    except rospy.ROSInterruptException:
            pass
